@startuml

interface TelegramResponse {
    ok: Boolean
}

class FileResponse {
    result: File
}

class MeResponse {
    result: User
}

class TelegramException {
    description: String
    errorCode: Option[Int]
}

class Updates {
    result: Seq[Update]
}

interface Update {
    updateId: Long
}

class MessageUpdate {
    message: Option[Message]
}

class CallbackQueryUpdate {
    callbackQuery: CallbackQuery
}

TelegramException -up-|> TelegramResponse
FileResponse -up-|> TelegramResponse
MeResponse -up-|> TelegramResponse
Updates -up-|> TelegramResponse
Updates *-down- Update
MessageUpdate -right-|> Update
MessageUpdate *-down- Message
CallbackQueryUpdate -left-|> Update
CallbackQueryUpdate *-down- CallbackQuery

interface Message {
   messageId: Long
   from: Option[User]
   chat: Chat
   date: Long
}

class PhotoSize {
    fileId: String
    width: Int
    height: Int
    fileSize: Option[Int]
}

class StickerMessage {
    messageId: Long
    from: Option[User]
    date: Long
    chat: Chat
    sticker: Sticker
}

class TextMessage {
 messageId: Long
 from: Option[User]
 date: Long
 chat: Chat
 text: String
}

TextMessage -up-|> Message
PhotoSize  -up-|> Message
StickerMessage -up-|> Message

class CallbackQuery {
  id: String,
  from: User,
  data: String,
  message: Option[Message] = None,
  inlineMessageId: Option[String] = None
}

@enduml